diff -ruN ns-2.35/common/packet.h /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/common/packet.h
--- ns-2.35/common/packet.h	2010-05-10 06:28:41.000000000 +0800
+++ /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/common/packet.h	2018-09-12 11:10:18.000000000 +0800
@@ -202,6 +202,11 @@
         // insert new packet types here
 static packet_t       PT_NTYPE = 73; // This MUST be the LAST one
 
+
+// @author Jesson LIU, for NDP
+static const short PT_NORMAL_PKT = 1;
+static const short PT_TRIM_PKT = 2;
+
 enum packetClass
 {
 	UNCLASSIFIED,
@@ -599,6 +604,7 @@
 struct hdr_cmn {
 	enum dir_t { DOWN= -1, NONE= 0, UP= 1 };
 	packet_t ptype_;	// packet type (see above)
+	int ptype_sub_;		// packet sub-type (add by @author Jesson LIU, for trim packets)
 	int	size_;		// simulated packet size
 	int	uid_;		// unique id
 	int	error_;		// error flag
@@ -651,6 +657,7 @@
 	
         /* per-field member functions */
 	inline packet_t& ptype() { return (ptype_); }
+	inline int& ptype_sub() { return (ptype_sub_); } //add by @author Jesson LIU
 	inline int& size() { return (size_); }
 	inline int& uid() { return (uid_); }
 	inline int& error() { return error_; }
@@ -715,6 +722,10 @@
 	/* setting all direction of pkts to be downward as default; 
 	   until channel changes it to +1 (upward) */
 	p->next_ = 0;
+
+	// @author Jesson LIU. A new packet is a non-trim packet by default
+	(HDR_CMN(p))->ptype_sub() = PT_NORMAL_PKT;
+
 	return (p);
 }

diff -ruN ns-2.35/Makefile.in /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/Makefile.in
--- ns-2.35/Makefile.in	2011-10-24 00:29:54.000000000 +0800
+++ /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/Makefile.in	2018-09-12 11:10:18.000000000 +0800
@@ -217,6 +217,7 @@
 	tools/integrator.o tools/queue-monitor.o \
 	tools/flowmon.o tools/loss-monitor.o \
 	queue/queue.o queue/drop-tail.o \
+	queue/ndp_priqueue.o \
 	adc/simple-intserv-sched.o queue/red.o \
 	queue/semantic-packetqueue.o queue/semantic-red.o \
 	tcp/ack-recons.o \
diff -ruN ns-2.35/queue/ndp_priqueue.cc /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/queue/ndp_priqueue.cc
--- ns-2.35/queue/ndp_priqueue.cc	1970-01-01 08:00:00.000000000 +0800
+++ /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/queue/ndp_priqueue.cc	2018-09-21 05:49:55.844231393 +0800
@@ -0,0 +1,144 @@
+/* -*-  Mode:C++; c-basic-offset:8; tab-width:8; indent-tabs-mode:t -*- */
+/*
+ * Copyright (c) 1994 Regents of the University of California.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. All advertising materials mentioning features or use of this software
+ *    must display the following acknowledgement:
+ *      This product includes software developed by the Computer Systems
+ *      Engineering Group at Lawrence Berkeley Laboratory.
+ * 4. Neither the name of the University nor of the Laboratory may be used
+ *    to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * @(#) $Header: /cvsroot/nsnam/ns-2/queue/ndp_priqueue.cc,v 1.19 2018/09/05 15:05:07 haldar Exp $ (LBL)
+ */
+
+/*
+ * @author Jesson Liu
+ */
+
+#include "ndp_priqueue.h"
+#include "tcp.h"
+#include "flags.h"
+#include "math.h"
+#include "random.h"
+
+#define max(arg1, arg2) (arg1>arg2 ? arg1 : arg2)
+#define min(arg1, arg2) (arg1<arg2 ? arg1 : arg2)
+
+static class NDP_PriQueueClass : public TclClass {
+
+public:
+	NDP_PriQueueClass() : TclClass("Queue/NDP_PriQueue") {}
+	TclObject* create(int, const char*const*) {
+		return (new NDP_PriQueue);
+	}
+} class_ndp_priqueue;
+
+void NDP_PriQueue::enque(Packet* p) {
+
+	int qlimBytes = qlim_/2*mean_pktsize_;		// two queues share the buffer equally
+	packet_t t = hdr_cmn::access(p)->ptype_sub();
+	packet_t pkt_type = hdr_cmn::access(p)->ptype();
+	int prio = 0;
+	int hdr_len = hdr_cmn::access(p)->size()-DATALEN;
+
+	if(pkt_type == PT_ACK){
+		
+		prio = 0;
+		if(TopQueueByteLength()+40>qlimBytes){
+			
+//			printf("-%d-, drop ack\n", this->qid_);
+			drop(p);
+			return;
+		}
+	}else if(pkt_type == PT_TCP){
+
+		if(t==PT_NORMAL_PKT){
+			prio = 1;
+			if(BottomQueueByteLength()+hdr_cmn::access(p)->size()>qlimBytes){
+	
+//				printf("-%d-: Bottom:%d, pkt size:%d\n", this->qid_, BottomQueueByteLength(), hdr_cmn::access(p)->size());
+
+				if(TopQueueByteLength()+hdr_len > qlimBytes){
+				// no room for headers
+					printf("-%d-, TL-hdl, %d-%d, drop packet, not trimmed\n", this->qid_, TopQueueByteLength(), hdr_len);
+					drop(p);
+					return;
+				}else{
+					// trim packets
+					// probally there is no real data in data_ array of Packet *p. CHECK IT!
+//					printf("datalen: %d\n", p->datalen());
+					hdr_cmn::access(p)->size() = hdr_len;
+					prio = 0;		// put it into Top Queue
+					hdr_cmn::access(p)->ptype_sub() = PT_TRIM_PKT;
+//					printf("-%d-, change pkt #.%d to trim\n", this->qid_, hdr_tcp::access(p)->seqno());
+				}
+	
+			}
+//			printf("-%d-, bottom queue length: %d\n", this->qid_, BottomQueueByteLength());
+	
+		}else if(t==PT_TRIM_PKT){
+			prio = 0;
+			if(TopQueueByteLength()+hdr_len > qlimBytes){
+//				printf("-%d-, drop trim packet\n", this->qid_);
+				drop(p);
+				return;
+			}
+//			printf("-%d-, top queue length: %d\n", this->qid_, TopQueueByteLength());
+		}
+	}else{
+		prio = 1;
+		if(BottomQueueByteLength()+hdr_cmn::access(p)->size() > qlimBytes){
+
+				drop(p);
+				return;
+		}
+	}
+	q_[prio]->enque(p);
+//	if(prio==0){
+//		printf("-%d-, top queue length: %d\n", this->qid_, TopQueueByteLength());
+//	}
+	/*if(this->qid_ == 0) {
+		double now = Scheduler::instance().clock();
+		float percentage = (float)((float)TotalByteLength()/((float)qlimBytes*2)*100);
+		printf("%lf	%f\n", now, percentage);
+	}*/
+}
+
+Packet* NDP_PriQueue::deque(){
+
+	if(TotalByteLength()>0){
+		
+		for(int i=0; i<MAX_QUEUE_NUM; i++){
+			
+			if(q_[i]->length()>0){
+				Packet* p = q_[i]->deque();
+				return p;
+			}
+		}
+	}
+	return NULL;
+}
+
diff -ruN ns-2.35/queue/ndp_priqueue.h /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/queue/ndp_priqueue.h
--- ns-2.35/queue/ndp_priqueue.h	1970-01-01 08:00:00.000000000 +0800
+++ /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/queue/ndp_priqueue.h	2018-09-12 11:10:18.000000000 +0800
@@ -0,0 +1,116 @@
+/* -*-  Mode:C++; c-basic-offset:8; tab-width:8; indent-tabs-mode:t -*- */
+/*
+ * Copyright (c) 1994 Regents of the University of California.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. All advertising materials mentioning features or use of this software
+ *    must display the following acknowledgement:
+ *      This product includes software developed by the Computer Systems
+ *      Engineering Group at Lawrence Berkeley Laboratory.
+ * 4. Neither the name of the University nor of the Laboratory may be used
+ *    to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * @(#) $Header: /cvsroot/nsnam/ns-2/queue/ndp_priqueue.h,v 1.19 2018/09/05 14:25:37 haldar Exp $ (LBL)
+ */
+
+/*
+ * @author Jesson Liu
+ */
+
+#ifndef ns_ndp_priqueue_h
+#define ns_ndp_priqueue_h
+
+#define MAX_QUEUE_NUM 2
+
+#include <string.h>
+#include "queue.h"
+#include "config.h"
+
+#define DATALEN 1460
+
+int ndp_queue_counter_ = 0;
+
+class NDP_PriQueue : public Queue {
+
+public:
+	NDP_PriQueue(){
+		
+		this->qid_ = ndp_queue_counter_;
+		ndp_queue_counter_++;
+		queue_num_=MAX_QUEUE_NUM;
+		//thresh_=65;
+		mean_pktsize_=1500;
+		//bind("queue_num_", &queue_num_);
+		//bind("thresh_", &thresh_);
+		//bind("mean_pktsize_", &mean_pktsize_);
+
+		q_=new PacketQueue*[MAX_QUEUE_NUM];
+		for(int i=0; i<MAX_QUEUE_NUM; i++){
+		
+			q_[i]=new PacketQueue;
+		}
+		
+	}
+
+	~NDP_PriQueue(){
+		
+		for(int i=0; i<MAX_QUEUE_NUM; i++){
+
+			delete q_[i];
+		}
+
+		delete[] q_;
+	}
+
+protected:
+	void enque(Packet*);
+	Packet* deque();
+
+	PacketQueue **q_;
+	int mean_pktsize_;
+	int queue_num_;
+	int qid_;
+
+	int TotalByteLength(){
+
+		int byte_length = 0;
+		for(int i=0; i<MAX_QUEUE_NUM; i++){
+			byte_length += q_[i]->byteLength();
+		}
+
+		return byte_length;
+	}
+
+	int TopQueueByteLength(){
+
+		return q_[0]->byteLength();
+	}
+	
+	int BottomQueueByteLength(){
+
+		return q_[1]->byteLength();
+	}
+};
+
+#endif
diff -ruN ns-2.35/tcl/lib/ns-default.tcl /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/tcl/lib/ns-default.tcl
--- ns-2.35/tcl/lib/ns-default.tcl	2010-07-04 06:45:45.000000000 +0800
+++ /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/tcl/lib/ns-default.tcl	2018-09-20 03:52:09.471936730 +0800
@@ -900,6 +900,11 @@
 Agent/SCTP/CMT set countPFToActiveRtxms_ 0;   # count of PF->Active changes
                                               # for retransmissions
 
+## Jesson LIU
+Agent/TCP set fullrate_ 12;		# 1Gbps, 100us RTT, 8 pkts/RTT
+Agent/TCP set initial_fullrate_ 12;	# the inital rate that NDP uses, which is the same value as fullrate_
+Agent/TCP set flowsize_ -1;	# -1 means no completion time printing
+
 Agent/TCP set seqno_ 0
 Agent/TCP set t_seqno_ 0
 Agent/TCP set maxburst_ 0
@@ -1048,6 +1053,10 @@
 Agent/TCP set sfrto_enabled_	0 ;	# Added on 2004/10/26 for F-RTO
 Agent/TCP set spurious_response_ 1 ;	# Added on 2004/10/26 for F-RTO
 
+# Jesson
+Agent/TCPSink set pull_interval_ 0.000012;	# 1Gbps, 1500Bytes*8/1Gbps
+Agent/TCPSink set nid_	-1;			# shared node
+
 Agent/TCPSink set sport_        0
 Agent/TCPSink set dport_        0         
 
diff -ruN ns-2.35/tcp/tcp.cc /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/tcp/tcp.cc
--- ns-2.35/tcp/tcp.cc	2011-06-20 12:51:46.000000000 +0800
+++ /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/tcp/tcp.cc	2018-09-21 05:17:22.504225235 +0800
@@ -76,7 +76,8 @@
 	  first_decrease_(1), fcnt_(0), nrexmit_(0), restart_bugfix_(1), 
           cong_action_(0), ecn_burst_(0), ecn_backoff_(0), ect_(0), 
           use_rtt_(0), qs_requested_(0), qs_approved_(0),
-	  qs_window_(0), qs_cwnd_(0), frto_(0)
+	  qs_window_(0), qs_cwnd_(0), frto_(0),
+		printful_(1), trim_counter_(0)		// Jesson
 {
 #ifdef TCP_DELAY_BIND_ALL
         // defined since Dec 1999.
@@ -101,6 +102,9 @@
         bind("necnresponses_", &necnresponses_);
         bind("ncwndcuts_", &ncwndcuts_);
 	bind("ncwndcuts1_", &ncwndcuts1_);
+	bind("fullrate_", &fullrate_);		// Jesson LIU
+	bind("initial_fullrate_", &initial_fullrate_);
+	bind("flowsize_", &flowsize_);
 #endif /* TCP_DELAY_BIND_ALL */
 
 }
@@ -114,6 +118,10 @@
         delay_bind_init_one("windowInit_");
         delay_bind_init_one("windowInitOption_");
 
+	delay_bind_init_one("fullrate_");		// Jesson LIU
+	delay_bind_init_one("initial_fullrate_");
+	delay_bind_init_one("flowsize_");
+
         delay_bind_init_one("syn_");
         delay_bind_init_one("max_connects_");
         delay_bind_init_one("windowOption_");
@@ -270,6 +278,10 @@
 	if (delay_bind(varName, localName, "k_parameter_", &k_parameter_, tracer)) return TCL_OK;
         if (delay_bind(varName, localName, "l_parameter_", &l_parameter_, tracer)) return TCL_OK;
 
+	// Jesson
+	if (delay_bind(varName, localName, "fullrate_", &fullrate_, tracer)) return TCL_OK;
+	if (delay_bind(varName, localName, "initial_fullrate_", &initial_fullrate_, tracer)) return TCL_OK;
+	if (delay_bind(varName, localName, "flowsize_", &flowsize_, tracer)) return TCL_OK;
 
         if (delay_bind_bool(varName, localName, "trace_all_oneline_", &trace_all_oneline_ , tracer)) return TCL_OK;
         if (delay_bind_bool(varName, localName, "nam_tracevar_", &nam_tracevar_ , tracer)) return TCL_OK;
@@ -913,8 +925,10 @@
 void TcpAgent::send_much(int force, int reason, int maxburst)
 {
 	send_idle_helper();
-	int win = window();
+//	int win = window();
+	int win = fullrate_;	// @author Jesson LIU, for full link rate transmission of NDP
 	int npackets = 0;
+//	printf("in sendmuch, win:%d, highest_ack_:%d, t_seqno_%d\n", win, (int)highest_ack_, (int)t_seqno_);
 
 	if (!force && delsnd_timer_.status() == TIMER_PENDING)
 		return;
@@ -948,7 +962,12 @@
 			delsnd_timer_.resched(Random::uniform(overhead_));
 			return;
 		}
-		win = window();
+		// Jesson, 'win' always equals 10
+		//win = window();
+		//win = this->fullrate_+this->trim_counter_;
+//		double now = Scheduler::instance().clock();
+//		printf("%lf: fid-win:%d-%d\n", now, fid_, win);
+
 		if (maxburst && npackets == maxburst)
 			break;
 	}
@@ -1575,8 +1594,11 @@
 void
 TcpAgent::send_one()
 {
-	if (t_seqno_ <= highest_ack_ + wnd_ && t_seqno_ < curseq_ &&
-		t_seqno_ <= highest_ack_ + cwnd_ + dupacks_ ) {
+	int win = this->fullrate_;	// Jesson, a new send_one condition
+
+	//if (t_seqno_ <= highest_ack_ + wnd_ && t_seqno_ < curseq_ &&
+	//	t_seqno_ <= highest_ack_ + cwnd_ + dupacks_ ) {
+	if (t_seqno_ <= highest_ack_ + win + dupacks_ && t_seqno_ < curseq_) {
 		output(t_seqno_, 0);
 		if (QOption_)
 			process_qoption_after_send () ;
@@ -1847,6 +1869,8 @@
 	 	* delayed-send timer, with random overhead
 	 	* to avoid phase effects
 	 	*/
+		resetPullPkts();		// Jesson, for NDP, handling timeout
+//		printf("# of pull pkts reset in nontrx\n");
 		send_much(1, TCP_REASON_TIMEOUT, maxburst_);
 	}
 }
@@ -1924,6 +1948,9 @@
 			reset_rtx_timer(0,1);
 		}
 		last_cwnd_action_ = CWND_ACTION_TIMEOUT;
+//		printf("before reset, current pull:%d\n", this->fullrate_);
+		resetPullPkts();		// Jesson, for NDP, handling timeout
+//		printf("%lf, # of pull pkts (current:%d) reset in timeout()\n", Scheduler::instance().clock(), this->fullrate_);
 		send_much(0, TCP_REASON_TIMEOUT, maxburst_);
 	} 
 	else {
diff -ruN ns-2.35/tcp/tcp.h /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/tcp/tcp.h
--- ns-2.35/tcp/tcp.h	2011-08-27 03:29:57.000000000 +0800
+++ /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/tcp/tcp.h	2018-09-21 04:25:05.420215345 +0800
@@ -445,6 +445,18 @@
 	int use_rtt_;	     /* Use RTT for timeout for ECN-marked SYN-ACK */
 	/* end of ECN */
 
+	/* for NDP, @author Jesson LIU*/
+	int fullrate_;		/* the link rate that NDP can use*/
+	int flowsize_;		/* the size of a flow, to print the finish time of this flow*/
+	int initial_fullrate_;	/* the initial rate that NDP can use */
+	short printful_;	/* for printing completion time only once*/
+	int trim_counter_;	/* for recording how many pull packets triggered by trim packets*/
+	int getFullRate() { return (this->fullrate_); }	/* the variation of full rate, caused by the number of trim ACKs received*/
+
+	void restorePullPkts() { this->fullrate_ = ++(this->fullrate_) > this->initial_fullrate_ ? this->initial_fullrate_ : this->fullrate_; }
+	void consumePullPkts() { this->fullrate_ = --(this->fullrate_)<0 ? 0 : this->fullrate_; }
+	void resetPullPkts() { this->fullrate_ = this->initial_fullrate_; }
+
 	/* used for Explicit Loss Notification */
 	void tcp_eln(Packet *pkt); /* reaction to ELN (usually wireless) */
         int eln_;               /* Explicit Loss Notification (wireless) */
diff -ruN ns-2.35/tcp/tcp-newreno.cc /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/tcp/tcp-newreno.cc
--- ns-2.35/tcp/tcp-newreno.cc	2009-12-31 06:06:34.000000000 +0800
+++ /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/tcp/tcp-newreno.cc	2018-09-21 05:43:24.344230159 +0800
@@ -102,6 +102,8 @@
 	}
 	partialnewack(pkt);
 	output(last_ack_ + 1, 0);
+//	consumePullPkts();		// Jesson, consume one pull packet per one retransmission
+//	printf("%lf: consume pull, @1 for lask_ack_:%d\n", Scheduler::instance().clock(), last_ack_);
 }
 
 int
@@ -145,6 +147,8 @@
                  */
                 reset_rtx_timer(1,0);
                 output(last_ack_ + 1, TCP_REASON_DUPACK);
+//		consumePullPkts();		// Jesson, consume one pull packet per one retransmission
+//		printf("%lf: consume pull, @2 for lask_ack_:%d\n", Scheduler::instance().clock(), last_ack_);
 		dupwnd_ = numdupacks_;
                 return;
         }
@@ -171,6 +175,8 @@
         	last_cwnd_action_ = CWND_ACTION_DUPACK;
         	slowdown(CLOSE_SSTHRESH_HALF|CLOSE_CWND_HALF);
         	output(last_ack_ + 1, TCP_REASON_DUPACK);       // from top
+//		consumePullPkts();		// Jesson, consume one pull packet per one retransmission
+//		printf("%lf: consume pull, @3 for lask_ack_:%d\n", Scheduler::instance().clock(), last_ack_);
 		dupwnd_ = numdupacks_;
 	}
         return;
@@ -182,6 +188,17 @@
 	hdr_tcp *tcph = hdr_tcp::access(pkt);
 	int valid_ack = 0;
 
+	// Jesson, this 'if' section is added for handling ACKs generated from trimmed packets
+	if(hdr_cmn::access(pkt)->ptype_sub()==PT_TRIM_PKT){
+
+		this->trim_counter_++;
+		output(tcph->seqno(), 0);
+//		double time = Scheduler::instance().clock();
+//		printf("%lf:	FID:%d, send a PKT triggered by trim ACK, trimed:#.%d, and total trimed:%d, current # of pull:%d\n", time, this->fid_, tcph->seqno(), this->trim_counter_, this->fullrate_);
+		Packet::free(pkt);
+		return;
+	}
+
 	/* Use first packet to calculate the RTT  --contributed by Allman */
 
         if (qs_approved_ == 1 && tcph->seqno() > last_ack_)
@@ -210,6 +227,17 @@
 		exit(1);
 	}
 #endif
+
+	/* Jesson, to print the completion time of flows. But flow size need to be greater than 0,
+	 * which means no completion time printing by default.
+	 */
+	if(((int)highest_ack_+1)>=(flowsize_/1460) && flowsize_>0 && printful_){
+		
+		double ft = Scheduler::instance().clock();
+		printf("%d %lf\n", fid_, ft);
+		printful_ = 0;
+	}
+
         /* W.N.: check if this is from a previous incarnation */
         if (tcph->ts() < lastreset_) {
                 // Remove packet and do nothing
@@ -268,10 +296,15 @@
 			 * "fast retransmit phase"), send one entirely new
 			 * data packet "to keep the flywheel going".  --Allman
 			 */
-			if (newreno_changes_ > 0 && (dupacks_ % 2) == 1)
+			if (newreno_changes_ > 0 && (dupacks_ % 2) == 1){
 				output (t_seqno_++,0);
+//				consumePullPkts();		// Jesson, consume one pull packet per one retransmission
+//				printf("%lf: consume pull, @4 for lask_ack_:%d\n", Scheduler::instance().clock(), t_seqno_-1);
+			}
 		} else if (dupacks_ < numdupacks_ && singledup_ ) {
                         send_one();
+//			consumePullPkts();		// Jesson, consume one pull packet per one retransmission
+//			printf("%lf: consume pull, @5 for lask_ack_:%d\n", Scheduler::instance().clock(), t_seqno_);
                 }
 	}
         if (tcph->seqno() >= last_ack_)
diff -ruN ns-2.35/tcp/tcp-sink.cc /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/tcp/tcp-sink.cc
--- ns-2.35/tcp/tcp-sink.cc	2010-04-04 04:40:15.000000000 +0800
+++ /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/tcp/tcp-sink.cc	2018-09-21 04:12:16.972212922 +0800
@@ -39,6 +39,11 @@
 #include "tcp-sink.h"
 #include "hdr_qs.h"
 
+
+// Jesson LIU
+struct NodeQueue* sink_nodes_header_ = NULL;
+struct NodeQueue* sink_nodes_tail_ = NULL;
+
 static class TcpSinkClass : public TclClass {
 public:
 	TcpSinkClass() : TclClass("Agent/TCPSink") {}
@@ -180,8 +185,13 @@
 	lastreset_(0.0)
 {
 	bytes_ = 0; 
-	bind("bytes_", &bytes_);
 
+	bind("bytes_", &bytes_);
+	
+	// Jesson
+	bind("pull_interval_", &pull_interval_);
+	bind("nid_", &nid_);
+	pulls_ = new std::deque<Packet*>();
 	/*
 	 * maxSackBlocks_ does wierd tracing things.
 	 * don't make it delay-bound yet.
@@ -204,6 +214,8 @@
 	delay_bind_init_one("RFC2581_immediate_ack_");
 	delay_bind_init_one("SYN_immediate_ack_");
 	delay_bind_init_one("ecn_syn_");
+	delay_bind_init_one("pull_interval_");	// Jesson
+	delay_bind_init_one("nid_");		//Jesson
 #if defined(TCP_DELAY_BIND_ALL) && 0
         delay_bind_init_one("maxSackBlocks_");
 #endif /* TCP_DELAY_BIND_ALL */
@@ -222,6 +234,9 @@
         if (delay_bind_bool(varName, localName, "RFC2581_immediate_ack_", &RFC2581_immediate_ack_, tracer)) return TCL_OK;
         if (delay_bind_bool(varName, localName, "SYN_immediate_ack_", &SYN_immediate_ack_, tracer)) return TCL_OK;
 	if (delay_bind_bool(varName, localName, "ecn_syn_", &ecn_syn_ ,tracer)) return TCL_OK;
+	// Jesson
+	if (delay_bind(varName, localName, "nid_", &nid_, tracer)) return TCL_OK;
+	if (delay_bind(varName, localName, "pull_interval_", &pull_interval_, tracer)) return TCL_OK;
 #if defined(TCP_DELAY_BIND_ALL) && 0
         if (delay_bind(varName, localName, "maxSackBlocks_", &max_sack_blocks_, tracer)) return TCL_OK;
 #endif /* TCP_DELAY_BIND_ALL */
@@ -265,6 +280,7 @@
 
 void TcpSink::ack(Packet* opkt)
 {
+	packet_t opkt_type = hdr_cmn::access(opkt)->ptype_sub();
 	Packet* npkt = allocpkt();
 	// opkt is the "old" packet that was received
 	// npkt is the "new" packet being constructed (for the ACK)
@@ -289,7 +305,6 @@
 	}
 
 
-	// get the tcp headers
 	ntcp->seqno() = acker_->Seqno();
 	// get the cumulative sequence number to put in the ACK; this
 	// is just the left edge of the receive window - 1
@@ -336,16 +351,31 @@
 		if (ecn_syn_) 
 			nf->ect() = 1;
 	}
-	acker_->append_ack(hdr_cmn::access(npkt),
-			   ntcp, otcp->seqno());
-	add_to_ack(npkt);
-	// the above function is used in TcpAsymSink
-
-        // Andrei Gurtov
-        acker_->last_ack_sent_ = ntcp->seqno();
-        // printf("ACK %d ts %f\n", ntcp->seqno(), ntcp->ts_echo());
 	
-	send(npkt, 0);
+	// Jesson Liu, remove the modification caused by trim packets
+	packet_t t = hdr_cmn::access(opkt)->ptype_sub();
+
+	if(t == PT_NORMAL_PKT){
+	// ONLY normal packets, NOT trim packets, can update the acker_
+		acker_->append_ack(hdr_cmn::access(npkt),
+				   ntcp, otcp->seqno());
+		add_to_ack(npkt);
+		// the above function is used in TcpAsymSink
+	
+	        // Andrei Gurtov
+	        acker_->last_ack_sent_ = ntcp->seqno();
+	        // printf("ACK %d ts %f\n", ntcp->seqno(), ntcp->ts_echo());
+	}else{
+		// label this ACK as trim ACK
+		hdr_cmn::access(npkt)->ptype_sub() = PT_TRIM_PKT;
+		ntcp->seqno() = hdr_tcp::access(opkt)->seqno();
+//		printf("fid:%d, a trim ACK (#.%d) is ready to enqueue\n", this->fid_, hdr_tcp::access(npkt)->seqno());
+	}
+	// add this ACK to pull queue
+	addToPullQueue(npkt);
+
+	//----removed by Jesson LIU, for ndp pull queue control------
+	// send(npkt, 0);
 	// send it
 }
 
@@ -357,29 +387,39 @@
 
 void TcpSink::recv(Packet* pkt, Handler*)
 {
-	int numToDeliver;
-	int numBytes = hdr_cmn::access(pkt)->size();
-	// number of bytes in the packet just received
-	hdr_tcp *th = hdr_tcp::access(pkt);
-	/* W.N. Check if packet is from previous incarnation */
-	if (th->ts() < lastreset_) {
-		// Remove packet and do nothing
-		Packet::free(pkt);
-		return;
-	}
-	acker_->update_ts(th->seqno(),th->ts(),ts_echo_rfc1323_);
-	// update the timestamp to echo
+	// trim packets contribute no data
+	// @author Jesson LIU
+	packet_t t = hdr_cmn::access(pkt)->ptype_sub();
 	
-      	numToDeliver = acker_->update(th->seqno(), numBytes);
-	// update the recv window; figure out how many in-order-bytes
-	// (if any) can be removed from the window and handed to the
-	// application
-	if (numToDeliver) {
-		bytes_ += numToDeliver;
-		recvBytes(numToDeliver);
+	if(t == PT_NORMAL_PKT){
+		int numToDeliver;
+		int numBytes = hdr_cmn::access(pkt)->size();
+		// number of bytes in the packet just received
+		hdr_tcp *th = hdr_tcp::access(pkt);
+		/* W.N. Check if packet is from previous incarnation */
+		if (th->ts() < lastreset_) {
+			// Remove packet and do nothing
+			Packet::free(pkt);
+			return;
+		}
+		acker_->update_ts(th->seqno(),th->ts(),ts_echo_rfc1323_);
+		// update the timestamp to echo
+		
+	      	numToDeliver = acker_->update(th->seqno(), numBytes);
+		// update the recv window; figure out how many in-order-bytes
+		// (if any) can be removed from the window and handed to the
+		// application
+		if (numToDeliver) {
+			bytes_ += numToDeliver;
+			recvBytes(numToDeliver);
+		}
+		// send any packets to the application
+	      	ack(pkt);
+	}else if(t == PT_TRIM_PKT){
+		//printf("fid:%d, received a trim packet, #.%d\n", this->fid_, hdr_tcp::access(pkt)->seqno());
+		// trim packet contribute no data, ack or statistic information
+		ack(pkt);
 	}
-	// send any packets to the application
-      	ack(pkt);
 	// ACK the packet
 	Packet::free(pkt);
 	// remove it from the system
@@ -756,3 +796,165 @@
 	// change the size of the common header to account for the
 	// Sack strings (2 4-byte words for each element)
 }
+
+/* Jesson Liu, for pull queue control
+ * 
+ * Send a pull packet from pull queue
+ */
+
+struct NodeQueue* findNodeQueue(int nid){
+	
+	struct NodeQueue* cur = sink_nodes_header_;
+	while(cur){
+		
+		if(cur->nid_ == nid){
+
+			return cur;
+		}
+
+		cur = cur->next_;
+	}
+	
+	return NULL;
+}
+
+void PullQueueTimer::expire(Event*){
+
+	if(this->queue_->size()>0){
+		this->queue_->front()->sendACK();
+		this->interval_ = this->queue_->front()->pull_interval_;
+		this->queue_->pop_front();
+	}
+	this->resched(interval_);
+}
+
+void PullQueueTimer::ackEnqueue(TcpSink* s){
+
+	this->queue_->push_back(s);
+}
+
+void TcpSink::addToPullQueue(Packet* pkt){
+
+//	if(!(pull_timer_.status() == TIMER_PENDING) && !(pull_timer_.isStarted_)){
+//		
+//		pull_timer_.resched(PULL_INTERVAL);
+//		pull_timer_.isStarted_ = 1;
+//	}
+
+//	printf("fid:%d, add ACK#.%d into pull queue\n", fid_, hdr_tcp::access(pkt)->seqno());
+	
+	this->pulls_->push_back(pkt);
+
+	// find the correct NodeQueue and add this TcpSink	
+	struct NodeQueue* q = findNodeQueue(this->nid_);
+	if(q){
+		q->pull_timer_->ackEnqueue(this);
+	}else{
+		// not found, new one
+		struct NodeQueue *nque = new struct NodeQueue;
+		nque->pull_timer_ = new PullQueueTimer();
+		nque->nid_ = this->nid_;
+		
+		nque->pull_timer_->isStarted_ = 1;
+		nque->pull_timer_->interval_ = this->pull_interval_;
+		nque->pull_timer_->resched(this->pull_interval_);
+		nque->next_ = NULL;
+
+		if(sink_nodes_header_==NULL){
+
+			sink_nodes_header_ = nque;
+			sink_nodes_tail_ = nque;
+		}
+
+		sink_nodes_tail_->next_ = nque;
+		sink_nodes_tail_ = nque;
+		nque->pull_timer_->ackEnqueue(this);
+	}
+}
+
+
+void TcpSink::sendACK(){
+	
+	//printf("fid:%d, pull queue size:%d\n", fid_, this->pulls_->size());
+	if(this->pulls_->size()>0){
+
+//		printf("fid:%d, pull one\n", fid_);	
+	
+		Packet* opkt = this->pulls_->front();
+
+//		//-----------------new packet----------------		
+//		Packet* npkt = allocpkt();
+//		// opkt is the "old" packet that was received
+//		// npkt is the "new" packet being constructed (for the ACK)
+//		double now = Scheduler::instance().clock();
+//		
+//		hdr_tcp *otcp = hdr_tcp::access(opkt);
+//		hdr_ip *oiph = hdr_ip::access(opkt);
+//		hdr_tcp *ntcp = hdr_tcp::access(npkt);
+//		
+//		if (qs_enabled_) {
+//			// QuickStart code from Srikanth Sundarrajan.
+//			hdr_qs *oqsh = hdr_qs::access(opkt);
+//			hdr_qs *nqsh = hdr_qs::access(npkt);
+//			if (otcp->seqno() == 0 && oqsh->flag() == QS_REQUEST) {
+//				nqsh->flag() = QS_RESPONSE;
+//				nqsh->ttl() = (oiph->ttl() - oqsh->ttl()) % 256;
+//				nqsh->rate() = oqsh->rate();
+//			}else {
+//				nqsh->flag() = QS_DISABLE;
+//			}
+//		}
+//		
+//		// get the tcp headers
+//		ntcp->seqno() = acker_->Seqno();
+//		// get the cumulative sequence number to put in the ACK; this
+//		// is just the left edge of the receive window - 1
+//		ntcp->ts() = now;
+//		// timestamp the packet
+//		
+//		if (ts_echo_bugfix_)  /* TCP/IP Illustrated, Vol. 2, pg. 870 */
+//			ntcp->ts_echo() = acker_->ts_to_echo();
+//		else
+//			ntcp->ts_echo() = otcp->ts();
+//			// echo the original's time stamp
+//		
+//		hdr_ip* oip = hdr_ip::access(opkt);
+//		hdr_ip* nip = hdr_ip::access(npkt);
+//		// get the ip headers
+//		nip->flowid() = oip->flowid();
+//		// copy the flow id
+//		
+//		hdr_flags* of = hdr_flags::access(opkt);
+//		hdr_flags* nf = hdr_flags::access(npkt);
+//		hdr_flags* sf;
+//		if (save_ != NULL)
+//			sf = hdr_flags::access(save_);
+//		else
+//			sf = 0;
+//		// Look at delayed packet being acked. 
+//		if ( (sf != 0 && sf->cong_action()) || of->cong_action() )
+//			// Sender has responsed to congestion. 
+//			acker_->update_ecn_unacked(0);
+//		if ( (sf != 0 && sf->ect() && sf->ce())  ||
+//					(of->ect() && of->ce()) )
+//			// New report of congestion.  
+//			acker_->update_ecn_unacked(1);
+//		if ( (sf != 0 && sf->ect()) || of->ect() )
+//			// Set EcnEcho bit.  
+//			nf->ecnecho() = acker_->ecn_unacked();
+//		if ((!of->ect() && of->ecnecho()) ||
+//					(sf != 0 && !sf->ect() && sf->ecnecho()) ) {
+//			// This is the negotiation for ECN-capability.
+//			// We are not checking for of->cong_action() also. 
+//			// In this respect, this does not conform to the 
+//			// specifications in the internet draft 
+//			nf->ecnecho() = 1;
+//			if (ecn_syn_)
+//				nf->ect() = 1;
+//		}
+//		//--------end of new packet----------
+		send(opkt, 0);
+		this->pulls_->pop_front();
+	}
+
+}
diff -ruN ns-2.35/tcp/tcp-sink.h /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/tcp/tcp-sink.h
--- ns-2.35/tcp/tcp-sink.h	2010-04-04 04:40:15.000000000 +0800
+++ /home/jesson/workspace/NS_CODE/NDP/ns-allinone-2.35/ns-2.35/tcp/tcp-sink.h	2018-09-13 07:02:24.530066019 +0800
@@ -36,6 +36,8 @@
 #ifndef ns_tcpsink_h
 #define ns_tcpsink_h
 
+#include <deque>
+//#include <vector>
 #include <math.h>
 #include "agent.h"
 #include "tcp.h"
@@ -46,12 +48,45 @@
 #define MWM (MWS-1)
 #define HS_MWS 65536
 #define HS_MWM (MWS-1)
+//#define PULL_INTERVAL 0.000012;
+
 /* For Tahoe TCP, the "window" parameter, representing the receiver's
  * advertised window, should be less than MWM.  For Reno TCP, the
  * "window" parameter should be less than MWM/2.
  */
 
 class TcpSink;
+
+/* @author Jesson LIU
+ * use this timer to pace the ACKs in the pull queue
+ * pacing interval are defined in TcpSink
+ */
+class PullQueueTimer : public TimerHandler {
+
+public:
+	PullQueueTimer() : TimerHandler() {
+	
+		isStarted_=0;
+		queue_ = new std::deque<TcpSink*>();
+	}
+	short isStarted_;
+	void ackEnqueue(TcpSink*);
+	double interval_;
+protected:
+	virtual void expire(Event *e);
+	std::deque<TcpSink*>* queue_;
+};
+
+struct NodeQueue{
+	
+	int nid_;
+	PullQueueTimer* pull_timer_;
+	struct NodeQueue* next_;
+};
+
+extern struct NodeQueue* sink_nodes_header_;            // periodical scheduling of pull packets
+extern struct NodeQueue* sink_nodes_tail_;		// Jesson Liu, the pointer of the timer tail
+
 class Acker {
 public:
 	Acker();
@@ -104,6 +139,10 @@
 	void reset();
 	int command(int argc, const char*const* argv);
 	TracedInt& maxsackblocks() { return max_sack_blocks_; }
+
+	// Jesson Liu, for pull queue control
+	double pull_interval_;
+	void sendACK();
 protected:
 	void ack(Packet*);
 	virtual void add_to_ack(Packet* pkt);
@@ -111,6 +150,13 @@
         virtual void delay_bind_init_all();
         virtual int delay_bind_dispatch(const char *varName, const char *localName, TclObject *tracer);
 
+	// Jesson LIU
+//	short isPullTimerStarted_;		// the flag of running timer
+//	PullQueueTimer pull_timer_;		// periodical scheduling of pull packets
+	std::deque<Packet*>* pulls_;		// pull queue
+	void addToPullQueue(Packet* pkt);
+	int nid_;				// the id of the belonged node
+
 	Acker* acker_;
 	int ts_echo_bugfix_;
 	int ts_echo_rfc1323_; 	// conforms to rfc1323 for timestamps echo
